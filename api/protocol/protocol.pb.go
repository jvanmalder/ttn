// Code generated by protoc-gen-gogo.
// source: github.com/TheThingsNetwork/ttn/api/protocol/protocol.proto
// DO NOT EDIT!

/*
	Package protocol is a generated protocol buffer package.

	It is generated from these files:
		github.com/TheThingsNetwork/ttn/api/protocol/protocol.proto

	It has these top-level messages:
		Message
		RxMetadata
		TxConfiguration
		ActivationMetadata
*/
package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import lorawan "github.com/TheThingsNetwork/ttn/api/protocol/lorawan"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	// Types that are valid to be assigned to Protocol:
	//	*Message_Lorawan
	Protocol isMessage_Protocol `protobuf_oneof:"protocol"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{0} }

type isMessage_Protocol interface {
	isMessage_Protocol()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_Lorawan struct {
	Lorawan *lorawan.Message `protobuf:"bytes,1,opt,name=lorawan,oneof"`
}

func (*Message_Lorawan) isMessage_Protocol() {}

func (m *Message) GetProtocol() isMessage_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *Message) GetLorawan() *lorawan.Message {
	if x, ok := m.GetProtocol().(*Message_Lorawan); ok {
		return x.Lorawan
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_Lorawan)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// protocol
	switch x := m.Protocol.(type) {
	case *Message_Lorawan:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Lorawan); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.Protocol has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 1: // protocol.lorawan
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(lorawan.Message)
		err := b.DecodeMessage(msg)
		m.Protocol = &Message_Lorawan{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// protocol
	switch x := m.Protocol.(type) {
	case *Message_Lorawan:
		s := proto.Size(x.Lorawan)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RxMetadata struct {
	// Types that are valid to be assigned to Protocol:
	//	*RxMetadata_Lorawan
	Protocol isRxMetadata_Protocol `protobuf_oneof:"protocol"`
}

func (m *RxMetadata) Reset()                    { *m = RxMetadata{} }
func (m *RxMetadata) String() string            { return proto.CompactTextString(m) }
func (*RxMetadata) ProtoMessage()               {}
func (*RxMetadata) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{1} }

type isRxMetadata_Protocol interface {
	isRxMetadata_Protocol()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RxMetadata_Lorawan struct {
	Lorawan *lorawan.Metadata `protobuf:"bytes,1,opt,name=lorawan,oneof"`
}

func (*RxMetadata_Lorawan) isRxMetadata_Protocol() {}

func (m *RxMetadata) GetProtocol() isRxMetadata_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *RxMetadata) GetLorawan() *lorawan.Metadata {
	if x, ok := m.GetProtocol().(*RxMetadata_Lorawan); ok {
		return x.Lorawan
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RxMetadata) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RxMetadata_OneofMarshaler, _RxMetadata_OneofUnmarshaler, _RxMetadata_OneofSizer, []interface{}{
		(*RxMetadata_Lorawan)(nil),
	}
}

func _RxMetadata_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RxMetadata)
	// protocol
	switch x := m.Protocol.(type) {
	case *RxMetadata_Lorawan:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Lorawan); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RxMetadata.Protocol has unexpected type %T", x)
	}
	return nil
}

func _RxMetadata_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RxMetadata)
	switch tag {
	case 1: // protocol.lorawan
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(lorawan.Metadata)
		err := b.DecodeMessage(msg)
		m.Protocol = &RxMetadata_Lorawan{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RxMetadata_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RxMetadata)
	// protocol
	switch x := m.Protocol.(type) {
	case *RxMetadata_Lorawan:
		s := proto.Size(x.Lorawan)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TxConfiguration struct {
	// Types that are valid to be assigned to Protocol:
	//	*TxConfiguration_Lorawan
	Protocol isTxConfiguration_Protocol `protobuf_oneof:"protocol"`
}

func (m *TxConfiguration) Reset()                    { *m = TxConfiguration{} }
func (m *TxConfiguration) String() string            { return proto.CompactTextString(m) }
func (*TxConfiguration) ProtoMessage()               {}
func (*TxConfiguration) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{2} }

type isTxConfiguration_Protocol interface {
	isTxConfiguration_Protocol()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TxConfiguration_Lorawan struct {
	Lorawan *lorawan.TxConfiguration `protobuf:"bytes,1,opt,name=lorawan,oneof"`
}

func (*TxConfiguration_Lorawan) isTxConfiguration_Protocol() {}

func (m *TxConfiguration) GetProtocol() isTxConfiguration_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *TxConfiguration) GetLorawan() *lorawan.TxConfiguration {
	if x, ok := m.GetProtocol().(*TxConfiguration_Lorawan); ok {
		return x.Lorawan
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TxConfiguration) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TxConfiguration_OneofMarshaler, _TxConfiguration_OneofUnmarshaler, _TxConfiguration_OneofSizer, []interface{}{
		(*TxConfiguration_Lorawan)(nil),
	}
}

func _TxConfiguration_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TxConfiguration)
	// protocol
	switch x := m.Protocol.(type) {
	case *TxConfiguration_Lorawan:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Lorawan); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TxConfiguration.Protocol has unexpected type %T", x)
	}
	return nil
}

func _TxConfiguration_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TxConfiguration)
	switch tag {
	case 1: // protocol.lorawan
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(lorawan.TxConfiguration)
		err := b.DecodeMessage(msg)
		m.Protocol = &TxConfiguration_Lorawan{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TxConfiguration_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TxConfiguration)
	// protocol
	switch x := m.Protocol.(type) {
	case *TxConfiguration_Lorawan:
		s := proto.Size(x.Lorawan)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ActivationMetadata struct {
	// Types that are valid to be assigned to Protocol:
	//	*ActivationMetadata_Lorawan
	Protocol isActivationMetadata_Protocol `protobuf_oneof:"protocol"`
}

func (m *ActivationMetadata) Reset()                    { *m = ActivationMetadata{} }
func (m *ActivationMetadata) String() string            { return proto.CompactTextString(m) }
func (*ActivationMetadata) ProtoMessage()               {}
func (*ActivationMetadata) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{3} }

type isActivationMetadata_Protocol interface {
	isActivationMetadata_Protocol()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ActivationMetadata_Lorawan struct {
	Lorawan *lorawan.ActivationMetadata `protobuf:"bytes,1,opt,name=lorawan,oneof"`
}

func (*ActivationMetadata_Lorawan) isActivationMetadata_Protocol() {}

func (m *ActivationMetadata) GetProtocol() isActivationMetadata_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *ActivationMetadata) GetLorawan() *lorawan.ActivationMetadata {
	if x, ok := m.GetProtocol().(*ActivationMetadata_Lorawan); ok {
		return x.Lorawan
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ActivationMetadata) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ActivationMetadata_OneofMarshaler, _ActivationMetadata_OneofUnmarshaler, _ActivationMetadata_OneofSizer, []interface{}{
		(*ActivationMetadata_Lorawan)(nil),
	}
}

func _ActivationMetadata_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ActivationMetadata)
	// protocol
	switch x := m.Protocol.(type) {
	case *ActivationMetadata_Lorawan:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Lorawan); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ActivationMetadata.Protocol has unexpected type %T", x)
	}
	return nil
}

func _ActivationMetadata_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ActivationMetadata)
	switch tag {
	case 1: // protocol.lorawan
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(lorawan.ActivationMetadata)
		err := b.DecodeMessage(msg)
		m.Protocol = &ActivationMetadata_Lorawan{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ActivationMetadata_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ActivationMetadata)
	// protocol
	switch x := m.Protocol.(type) {
	case *ActivationMetadata_Lorawan:
		s := proto.Size(x.Lorawan)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Message)(nil), "protocol.Message")
	proto.RegisterType((*RxMetadata)(nil), "protocol.RxMetadata")
	proto.RegisterType((*TxConfiguration)(nil), "protocol.TxConfiguration")
	proto.RegisterType((*ActivationMetadata)(nil), "protocol.ActivationMetadata")
}
func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Protocol != nil {
		nn1, err := m.Protocol.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Message_Lorawan) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Lorawan != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Lorawan.Size()))
		n2, err := m.Lorawan.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *RxMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RxMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Protocol != nil {
		nn3, err := m.Protocol.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *RxMetadata_Lorawan) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Lorawan != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Lorawan.Size()))
		n4, err := m.Lorawan.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *TxConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Protocol != nil {
		nn5, err := m.Protocol.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	return i, nil
}

func (m *TxConfiguration_Lorawan) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Lorawan != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Lorawan.Size()))
		n6, err := m.Lorawan.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *ActivationMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivationMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Protocol != nil {
		nn7, err := m.Protocol.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	return i, nil
}

func (m *ActivationMetadata_Lorawan) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Lorawan != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Lorawan.Size()))
		n8, err := m.Lorawan.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func encodeFixed64Protocol(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Protocol(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintProtocol(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Message) Size() (n int) {
	var l int
	_ = l
	if m.Protocol != nil {
		n += m.Protocol.Size()
	}
	return n
}

func (m *Message_Lorawan) Size() (n int) {
	var l int
	_ = l
	if m.Lorawan != nil {
		l = m.Lorawan.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *RxMetadata) Size() (n int) {
	var l int
	_ = l
	if m.Protocol != nil {
		n += m.Protocol.Size()
	}
	return n
}

func (m *RxMetadata_Lorawan) Size() (n int) {
	var l int
	_ = l
	if m.Lorawan != nil {
		l = m.Lorawan.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *TxConfiguration) Size() (n int) {
	var l int
	_ = l
	if m.Protocol != nil {
		n += m.Protocol.Size()
	}
	return n
}

func (m *TxConfiguration_Lorawan) Size() (n int) {
	var l int
	_ = l
	if m.Lorawan != nil {
		l = m.Lorawan.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ActivationMetadata) Size() (n int) {
	var l int
	_ = l
	if m.Protocol != nil {
		n += m.Protocol.Size()
	}
	return n
}

func (m *ActivationMetadata_Lorawan) Size() (n int) {
	var l int
	_ = l
	if m.Lorawan != nil {
		l = m.Lorawan.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func sovProtocol(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProtocol(x uint64) (n int) {
	return sovProtocol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lorawan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &lorawan.Message{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &Message_Lorawan{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RxMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RxMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RxMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lorawan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &lorawan.Metadata{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &RxMetadata_Lorawan{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lorawan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &lorawan.TxConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &TxConfiguration_Lorawan{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivationMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivationMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivationMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lorawan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &lorawan.ActivationMetadata{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &ActivationMetadata_Lorawan{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtocol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProtocol
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProtocol
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProtocol(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProtocol = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtocol   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/protocol/protocol.proto", fileDescriptorProtocol)
}

var fileDescriptorProtocol = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xb2, 0x4e, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x0f, 0xc9, 0x48, 0x0d, 0xc9, 0xc8, 0xcc, 0x4b, 0x2f,
	0xf6, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0xd6, 0x2f, 0x29, 0xc9, 0xd3, 0x4f, 0x2c, 0xc8, 0xd4,
	0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0xce, 0xcf, 0x81, 0x33, 0xf4, 0xc0, 0x0c, 0x21, 0x0e, 0x18,
	0x5f, 0x4a, 0x0d, 0x43, 0x69, 0x4e, 0x7e, 0x51, 0x62, 0x79, 0x62, 0x1e, 0x8c, 0x86, 0xe8, 0x50,
	0x72, 0xe6, 0x62, 0xf7, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x15, 0xd2, 0xe1, 0x62, 0x87, 0xca,
	0x49, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x1b, 0x09, 0xe8, 0xc1, 0xd4, 0x42, 0x95, 0x78, 0x30, 0x04,
	0xc1, 0x94, 0x38, 0x71, 0x71, 0xc1, 0x2d, 0x53, 0x72, 0xe7, 0xe2, 0x0a, 0xaa, 0xf0, 0x4d, 0x2d,
	0x49, 0x4c, 0x49, 0x2c, 0x49, 0x14, 0xd2, 0x45, 0x37, 0x47, 0x10, 0xc9, 0x1c, 0x88, 0x1a, 0x5c,
	0x06, 0x05, 0x73, 0xf1, 0x87, 0x54, 0x38, 0xe7, 0xe7, 0xa5, 0x65, 0xa6, 0x97, 0x16, 0x25, 0x96,
	0x64, 0xe6, 0xe7, 0x09, 0x99, 0xa0, 0x9b, 0x26, 0x01, 0x37, 0x0d, 0x4d, 0x29, 0x2e, 0x43, 0x23,
	0xb9, 0x84, 0x1c, 0x93, 0x4b, 0x32, 0xcb, 0xc0, 0x8a, 0xe0, 0xae, 0x34, 0x47, 0x37, 0x57, 0x1a,
	0x6e, 0x2e, 0xa6, 0x6a, 0x1c, 0x46, 0x3b, 0x59, 0x9d, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c,
	0xe3, 0x83, 0x47, 0x72, 0x8c, 0x51, 0x3a, 0xa4, 0x44, 0x5d, 0x12, 0x1b, 0x98, 0x65, 0x0c, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x2a, 0xe7, 0x81, 0x77, 0xf1, 0x01, 0x00, 0x00,
}
